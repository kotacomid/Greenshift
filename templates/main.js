/**
 * Main JavaScript File
 * Generated by AI Theme Generator
 * Animation Style: {{ animation_style }}
 */

jQuery(document).ready(function($) {
    'use strict';

    // Configuration
    const config = {
        animationStyle: '{{ animation_style }}',
        primaryColor: '{{ colors.primary }}',
        secondaryColor: '{{ colors.secondary }}',
        duration: '{{ animations.duration }}',
        easing: '{{ animations.easing }}'
    };

    /**
     * Smooth Scrolling for Anchor Links
     */
    function initSmoothScroll() {
        $('a[href^="#"]').on('click', function(e) {
            e.preventDefault();
            
            const target = $(this.getAttribute('href'));
            if (target.length) {
                $('html, body').animate({
                    scrollTop: target.offset().top - 80
                }, 800, 'easeInOutCubic');
            }
        });
    }

    /**
     * Navbar Scroll Effects
     */
    function initNavbarEffects() {
        const navbar = $('.navbar, nav');
        const scrollThreshold = 50;

        $(window).scroll(function() {
            const scrollTop = $(window).scrollTop();
            
            if (scrollTop > scrollThreshold) {
                navbar.addClass('scrolled bg-white shadow-lg').removeClass('bg-white/95');
                navbar.find('.nav-link').removeClass('text-white').addClass('text-gray-900');
            } else {
                navbar.removeClass('scrolled bg-white shadow-lg').addClass('bg-white/95');
                navbar.find('.nav-link').removeClass('text-gray-900').addClass('text-white');
            }
        });
    }

    /**
     * Scroll Animations
     */
    function initScrollAnimations() {
        const observerOptions = {
            threshold: 0.2,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const element = entry.target;
                    
                    // Remove any existing animation classes
                    element.classList.remove('opacity-0', 'translate-y-10', 'scale-95');
                    
                    // Add animation based on style
                    switch (config.animationStyle) {
                        case 'smooth':
                            element.classList.add('animate-fade-in');
                            break;
                        case 'bouncy':
                            element.classList.add('animate-bounce-in');
                            break;
                        case 'minimal':
                            element.classList.add('animate-slide-in');
                            break;
                        default:
                            element.classList.add('animate-fade-in');
                    }
                    
                    // Unobserve after animation
                    observer.unobserve(element);
                }
            });
        }, observerOptions);

        // Observe elements
        $('.animate-on-scroll, .service-card, .testimonial-card, .stats-item').each(function() {
            observer.observe(this);
        });
    }

    /**
     * Counter Animation
     */
    function initCounterAnimation() {
        $('.counter').each(function() {
            const $this = $(this);
            const target = parseInt($this.text().replace(/[^\d]/g, ''));
            const duration = 2000;
            const increment = target / (duration / 16);
            let current = 0;

            const timer = setInterval(function() {
                current += increment;
                if (current >= target) {
                    current = target;
                    clearInterval(timer);
                }
                
                const formattedNumber = Math.floor(current).toLocaleString();
                const originalText = $this.data('original') || $this.text();
                $this.text(originalText.replace(/[\d,]+/, formattedNumber));
            }, 16);
        });
    }

    /**
     * Mobile Menu Toggle
     */
    function initMobileMenu() {
        const mobileMenuBtn = $('.mobile-menu-btn, .hamburger-menu');
        const mobileMenu = $('.mobile-menu, .nav-mobile');
        const menuOverlay = $('.menu-overlay');

        mobileMenuBtn.on('click', function() {
            mobileMenu.toggleClass('active');
            $(this).toggleClass('active');
            $('body').toggleClass('menu-open');
            
            if (menuOverlay.length) {
                menuOverlay.toggleClass('active');
            }
        });

        // Close menu when clicking overlay or menu item
        $(document).on('click', '.menu-overlay, .mobile-menu a', function() {
            mobileMenu.removeClass('active');
            mobileMenuBtn.removeClass('active');
            $('body').removeClass('menu-open');
            if (menuOverlay.length) {
                menuOverlay.removeClass('active');
            }
        });
    }

    /**
     * Contact Form Handler
     */
    function initContactForm() {
        {% if contact_form %}
        $('#contact-form').on('submit', function(e) {
            e.preventDefault();
            
            const form = $(this);
            const submitBtn = form.find('button[type="submit"]');
            const originalText = submitBtn.text();
            
            // Show loading state
            submitBtn.text('Mengirim...').prop('disabled', true);
            
            // Prepare form data
            const formData = {
                action: '{{ theme_slug }}_contact_form',
                name: form.find('[name="name"]').val(),
                email: form.find('[name="email"]').val(),
                phone: form.find('[name="phone"]').val(),
                subject: form.find('[name="subject"]').val(),
                message: form.find('[name="message"]').val(),
                '{{ theme_slug }}_nonce': '{{ theme_slug }}_ajax.nonce'
            };
            
            // Send AJAX request
            $.ajax({
                url: '{{ theme_slug }}_ajax.ajax_url',
                type: 'POST',
                data: formData,
                success: function(response) {
                    if (response.success) {
                        showNotification('success', response.data);
                        form[0].reset();
                    } else {
                        showNotification('error', response.data);
                    }
                },
                error: function() {
                    showNotification('error', 'Terjadi kesalahan. Silakan coba lagi.');
                },
                complete: function() {
                    submitBtn.text(originalText).prop('disabled', false);
                }
            });
        });
        {% endif %}
    }

    /**
     * Show Notification
     */
    function showNotification(type, message) {
        const notification = $(`
            <div class="notification notification-${type} fixed top-4 right-4 z-50 bg-white rounded-lg shadow-2xl p-4 max-w-sm transform translate-x-full opacity-0 transition-all duration-300">
                <div class="flex items-start">
                    <div class="flex-shrink-0 mr-3">
                        ${type === 'success' 
                            ? '<svg class="w-6 h-6 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>'
                            : '<svg class="w-6 h-6 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>'
                        }
                    </div>
                    <div class="flex-1">
                        <p class="text-sm font-medium text-gray-900">${message}</p>
                    </div>
                    <button class="ml-3 notification-close">
                        <svg class="w-4 h-4 text-gray-400 hover:text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
            </div>
        `);
        
        $('body').append(notification);
        
        // Animate in
        setTimeout(() => {
            notification.removeClass('translate-x-full opacity-0');
        }, 100);
        
        // Auto hide after 5 seconds
        setTimeout(() => {
            hideNotification(notification);
        }, 5000);
        
        // Close button
        notification.find('.notification-close').on('click', () => {
            hideNotification(notification);
        });
    }

    function hideNotification(notification) {
        notification.addClass('translate-x-full opacity-0');
        setTimeout(() => {
            notification.remove();
        }, 300);
    }

    /**
     * Parallax Effects
     */
    function initParallax() {
        if (config.animationStyle === 'smooth' || config.animationStyle === 'bouncy') {
            $(window).scroll(function() {
                const scrolled = $(window).scrollTop();
                const parallaxElements = $('.parallax');
                
                parallaxElements.each(function() {
                    const speed = $(this).data('speed') || 0.5;
                    const offset = scrolled * speed;
                    $(this).css('transform', `translateY(${offset}px)`);
                });
            });
        }
    }

    /**
     * Lazy Loading for Images
     */
    function initLazyLoading() {
        const imageObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target;
                    const src = img.dataset.src;
                    
                    if (src) {
                        img.src = src;
                        img.classList.remove('lazy');
                        img.classList.add('loaded');
                        imageObserver.unobserve(img);
                    }
                }
            });
        });

        document.querySelectorAll('img[data-src]').forEach(img => {
            imageObserver.observe(img);
        });
    }

    /**
     * Service Cards Hover Effects
     */
    function initServiceCards() {
        $('.service-card').hover(
            function() {
                $(this).addClass('transform -translate-y-2 shadow-2xl');
                $(this).find('.service-icon').addClass('scale-110');
            },
            function() {
                $(this).removeClass('transform -translate-y-2 shadow-2xl');
                $(this).find('.service-icon').removeClass('scale-110');
            }
        );
    }

    /**
     * Testimonial Slider
     */
    function initTestimonialSlider() {
        const testimonialSlider = $('.testimonial-slider');
        if (testimonialSlider.length && typeof Swiper !== 'undefined') {
            new Swiper('.testimonial-slider', {
                slidesPerView: 1,
                spaceBetween: 30,
                loop: true,
                autoplay: {
                    delay: 5000,
                    disableOnInteraction: false,
                },
                pagination: {
                    el: '.swiper-pagination',
                    clickable: true,
                },
                navigation: {
                    nextEl: '.swiper-button-next',
                    prevEl: '.swiper-button-prev',
                },
                breakpoints: {
                    640: {
                        slidesPerView: 2,
                    },
                    1024: {
                        slidesPerView: 3,
                    },
                }
            });
        }
    }

    /**
     * WhatsApp Click Tracking
     */
    function initWhatsAppTracking() {
        $('.whatsapp-float, .whatsapp-btn').on('click', function() {
            // Google Analytics tracking (if available)
            if (typeof gtag !== 'undefined') {
                gtag('event', 'click', {
                    event_category: 'Contact',
                    event_label: 'WhatsApp Float',
                    event_action: 'Click'
                });
            }
            
            // Custom tracking
            console.log('WhatsApp clicked');
        });
    }

    /**
     * Performance Monitoring
     */
    function initPerformanceMonitoring() {
        // Page load time
        window.addEventListener('load', function() {
            const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;
            console.log(`Page load time: ${loadTime}ms`);
            
            // Send to analytics if needed
            if (typeof gtag !== 'undefined') {
                gtag('event', 'timing_complete', {
                    name: 'load',
                    value: loadTime
                });
            }
        });
    }

    /**
     * Add custom CSS animations based on style
     */
    function addCustomAnimations() {
        const style = document.createElement('style');
        let animations = '';
        
        switch (config.animationStyle) {
            case 'bouncy':
                animations = `
                    @keyframes bounce-in {
                        0% { opacity: 0; transform: scale(0.3) translateY(50px); }
                        50% { opacity: 1; transform: scale(1.05) translateY(-10px); }
                        70% { transform: scale(0.9) translateY(0px); }
                        100% { opacity: 1; transform: scale(1) translateY(0px); }
                    }
                    .animate-bounce-in { animation: bounce-in ${config.duration} ${config.easing}; }
                `;
                break;
            case 'minimal':
                animations = `
                    @keyframes slide-in {
                        from { opacity: 0; transform: translateY(20px); }
                        to { opacity: 1; transform: translateY(0); }
                    }
                    .animate-slide-in { animation: slide-in ${config.duration} ${config.easing}; }
                `;
                break;
            default: // smooth
                animations = `
                    @keyframes fade-in {
                        from { opacity: 0; transform: translateY(30px); }
                        to { opacity: 1; transform: translateY(0); }
                    }
                    .animate-fade-in { animation: fade-in ${config.duration} ${config.easing}; }
                `;
        }
        
        style.textContent = animations;
        document.head.appendChild(style);
    }

    /**
     * Initialize everything
     */
    function init() {
        console.log('🚀 Initializing {{ theme_name | default("AI Theme") }}...');
        
        addCustomAnimations();
        initSmoothScroll();
        initNavbarEffects();
        initScrollAnimations();
        initMobileMenu();
        initContactForm();
        initParallax();
        initLazyLoading();
        initServiceCards();
        initTestimonialSlider();
        initWhatsAppTracking();
        initPerformanceMonitoring();
        
        // Initialize counter animation when in viewport
        const statsSection = $('.stats-section, .hero-stats');
        if (statsSection.length) {
            const statsObserver = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        initCounterAnimation();
                        statsObserver.unobserve(entry.target);
                    }
                });
            });
            statsObserver.observe(statsSection[0]);
        }
        
        console.log('✅ Theme initialized successfully!');
    }

    // Initialize when document is ready
    init();

    // Expose config for debugging
    window.themeConfig = config;
});

/**
 * Vanilla JavaScript for critical functionality
 */
document.addEventListener('DOMContentLoaded', function() {
    // Preloader
    const preloader = document.querySelector('.preloader');
    if (preloader) {
        setTimeout(() => {
            preloader.style.opacity = '0';
            setTimeout(() => {
                preloader.style.display = 'none';
            }, 300);
        }, 1000);
    }
    
    // Dark mode toggle (if implemented)
    const darkModeToggle = document.querySelector('.dark-mode-toggle');
    if (darkModeToggle) {
        darkModeToggle.addEventListener('click', function() {
            document.documentElement.classList.toggle('dark');
            localStorage.setItem('darkMode', document.documentElement.classList.contains('dark'));
        });
        
        // Load saved preference
        if (localStorage.getItem('darkMode') === 'true') {
            document.documentElement.classList.add('dark');
        }
    }
    
    // Copy to clipboard functionality
    const copyButtons = document.querySelectorAll('.copy-btn');
    copyButtons.forEach(btn => {
        btn.addEventListener('click', function() {
            const target = this.dataset.target;
            const text = document.querySelector(target).textContent;
            
            navigator.clipboard.writeText(text).then(() => {
                this.textContent = 'Copied!';
                setTimeout(() => {
                    this.textContent = 'Copy';
                }, 2000);
            });
        });
    });
});

// Service Worker for offline functionality (optional)
if ('serviceWorker' in navigator) {
    window.addEventListener('load', function() {
        navigator.serviceWorker.register('/sw.js')
            .then(function(registration) {
                console.log('SW registered: ', registration);
            })
            .catch(function(registrationError) {
                console.log('SW registration failed: ', registrationError);
            });
    });
}